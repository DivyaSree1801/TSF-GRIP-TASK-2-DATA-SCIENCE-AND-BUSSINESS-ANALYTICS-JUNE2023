# -*- coding: utf-8 -*-
"""TSF_GRIP_TASK_2(DATA_SCIENCE_AND_BUSSINES_ANALYTICS_JUNE2023).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Od0hvmSpqL_XMdOit_0ry_GSvMNSWgIS
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.cluster import KMeans
from sklearn import preprocessing
import sklearn.cluster as cluster
import sklearn.metrics as metrics
from sklearn.preprocessing import MinMaxScaler

data=pd.read_csv("/content/iris.csv")

data

data.info()

data.head(10)

data.describe()

data.isnull()

data.isnull().sum()

data.columns

data.rename(columns={'id':'id','SepalLengthCm':'sepal_length','SepalWidthCm':'sepal_width','PetalLengthCm':'petal_length','PetalWidthCm':'petal_width' , 'Species':'Species'},inplace=True)

plt.scatter(data['Species'], data['petal_length'])
plt.title("iris")
plt.xlabel('Species')
plt.ylabel('petal_length')
plt.show()

sns.lineplot(x="petal_length", y="petal_width" ,data=data)
plt.title('iris data')
plt.show()

data['Species'].value_counts()

print(data["Species"].unique())

plt.figure(figsize=(12, 6))
sns.histplot(data.sepal_length)
plt.xlabel('f')
plt.ylabel('Sepal Length')
plt.title('Histogram of Sepal Length (Cm)', size=16)

correlation = data.corr()
correlation

sns.heatmap(data.corr(),annot=True,cmap='inferno')

scaler = MinMaxScaler()

scale = scaler.fit_transform(data[["sepal_length",	"sepal_width",	"petal_length",	"petal_width"]])

data_scale = pd.DataFrame(scale, columns = ["sepal_length",	"sepal_width",	"petal_length",	"petal_width"]);
data_scale.head(5)

print(data_scale)

km=KMeans(n_clusters=2)
y_predicted = km.fit_predict(data[["sepal_length",	"sepal_width",	"petal_length",	"petal_width"]])
y_predicted

km.cluster_centers_

sns.pairplot(data)

scaler = MinMaxScaler()

scale = scaler.fit_transform(data[["sepal_length",	"sepal_width",	"petal_length",	"petal_width"]])

data_scale = pd.DataFrame(scale, columns = ["sepal_length",	"sepal_width",	"petal_length",	"petal_width"]);
data_scale.head(5)

print(data_scale)

km=KMeans(n_clusters=2)
y_predicted = km.fit_predict(data[["sepal_length",	"sepal_width",	"petal_length",	"petal_width"]])
y_predicted

X= data.iloc[:, [0, 1, 2, 3]].values

from sklearn.cluster import KMeans
wcss = []

for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', 
                    max_iter = 300, n_init = 10, random_state = 0)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)
    
# Plotting the results onto a line graph, 
# `allowing us to observe 'The elbow'
plt.plot(range(1, 11), wcss)
plt.title('The elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS') # Within cluster sum of squares
plt.show()

kmeans = KMeans(n_clusters = 5, init = "k-means++", random_state = 42)
y_kmeans = kmeans.fit_predict(X)

plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 60, c = 'red', label = 'Iris-setosa')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 60, c = 'blue', label = 'Iris-versicolour')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 60, c = 'green', label = 'Iris-virginica') 
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 100, c = 'black', label = 'Centroids')
plt.legend() 

plt.show()